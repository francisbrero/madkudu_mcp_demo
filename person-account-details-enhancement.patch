From 0ddead639aa6d0a7f60fa23e61d2228f92aa1157 Mon Sep 17 00:00:00 2001
From: Margo Rey <margo@madkudu.com>
Date: Tue, 10 Jun 2025 21:02:37 -0700
Subject: [PATCH] =?UTF-8?q?Enhance=20person=20and=20account=20details=20wi?=
 =?UTF-8?q?th=20two-step=20lookup=20approach=20-=20Updated=20getPersonDeta?=
 =?UTF-8?q?ils=20and=20getAccountDetails=20to=20use=20lookup=20=E2=86=92?=
 =?UTF-8?q?=20extract=20mk=5Fid=20=E2=86=92=20fetch=20details=20pattern=20?=
 =?UTF-8?q?-=20Enhanced=20UI=20with=20error=20handling,=20social=20links,?=
 =?UTF-8?q?=20logos,=20funding=20info=20-=20Renamed=20'Available=20Tools'?=
 =?UTF-8?q?=20to=20'Endpoints'=20and=20updated=20descriptions?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 src/app/_components/ApiTester.tsx | 1571 +++++++++++++++++------------
 src/app/mcp-test/page.tsx         |   27 +-
 src/lib/madkuduClient.ts          |  255 ++++-
 src/server/api/routers/madkudu.ts |  151 ++-
 4 files changed, 1277 insertions(+), 727 deletions(-)

diff --git a/src/app/_components/ApiTester.tsx b/src/app/_components/ApiTester.tsx
index dcc3e99..8f7dd0d 100644
--- a/src/app/_components/ApiTester.tsx
+++ b/src/app/_components/ApiTester.tsx
@@ -1,74 +1,146 @@
 "use client";
 
 import React, { useState } from "react";
+import { Wrench, Linkedin, Mail, MapPin, User, Building2, Search, Users, Activity, Crown } from "lucide-react";
 import { api } from "~/trpc/react";
 
+// Define the structure for a tool
+interface Tool {
+  id: 'person-details' | 'account-details' | 'ai-research' | 'discover-persons' | 'person-activities' | 'account-activities' | 'account-top-users';
+  name: string;
+  description: string;
+  inputs: ('email' | 'domain' | 'title' | 'seniority' | 'country')[];
+  icon: any;
+  category: 'Person' | 'Account';
+}
+
+// A list of available tools
+const availableTools: Tool[] = [
+  {
+    id: 'person-details',
+    name: 'Get Person Details',
+    description: 'Enriched contact info and scoring',
+    inputs: ['email'],
+    icon: User,
+    category: 'Person',
+  },
+  {
+    id: 'account-details',
+    name: 'Get Account Details',
+    description: 'Company firmographics and scoring',
+    inputs: ['domain'],
+    icon: Building2,
+    category: 'Account',
+  },
+  {
+    id: 'ai-research',
+    name: 'AI Account Research',
+    description: 'Recent news and insights',
+    inputs: ['domain'],
+    icon: Search,
+    category: 'Account',
+  },
+  {
+    id: 'discover-persons',
+    name: 'Discover Persons',
+    description: 'Find new prospects by criteria',
+    inputs: ['domain', 'title', 'seniority', 'country'],
+    icon: Users,
+    category: 'Person',
+  },
+  {
+    id: 'person-activities',
+    name: 'Get Person Activities',
+    description: 'Activity timeline for person',
+    inputs: ['email'],
+    icon: Activity,
+    category: 'Person',
+  },
+  {
+    id: 'account-activities',
+    name: 'Get Account Activities',
+    description: 'Activity timeline for account',
+    inputs: ['domain'],
+    icon: Activity,
+    category: 'Account',
+  },
+  {
+    id: 'account-top-users',
+    name: 'Get Account Top Users',
+    description: 'Key contacts at company',
+    inputs: ['domain'],
+    icon: Crown,
+    category: 'Account',
+  },
+];
+
 export default function ApiTester() {
+  const [selectedTool, setSelectedTool] = useState<Tool | null>(availableTools[0] ?? null);
   const [email, setEmail] = useState("francis@madkudu.com");
   const [domain, setDomain] = useState("madkudu.com");
-  const [result, setResult] = useState<unknown>(null);
+  const [title, setTitle] = useState("");
+  const [seniority, setSeniority] = useState("");
+  const [country, setCountry] = useState("");
+  const [result, setResult] = useState<any>(null);
   const [isLoading, setIsLoading] = useState(false);
   const [error, setError] = useState<string | null>(null);
   const [activeTab, setActiveTab] = useState<"formatted" | "raw">("formatted");
-  const [resultType, setResultType] = useState<"contact" | "account" | "research" | null>(null);
 
   // tRPC hooks
   const lookupPersonMutation = api.madkudu.lookupPerson.useMutation();
   const lookupAccountMutation = api.madkudu.lookupAccount.useMutation();
+  const getPersonDetailsMutation = api.madkudu.getPersonDetails.useMutation();
+  const getAccountDetailsMutation = api.madkudu.getAccountDetails.useMutation();
   const getAIResearchMutation = api.madkudu.getAIResearch.useMutation();
+  const discoverPersonsMutation = api.madkudu.discoverPersons.useMutation();
+  const getPersonActivitiesMutation = api.madkudu.getPersonActivities.useMutation();
+  const getAccountActivitiesMutation = api.madkudu.getAccountActivities.useMutation();
+  const getAccountTopUsersMutation = api.madkudu.getAccountTopUsers.useMutation();
 
-  const handleGetContactDetails = async () => {
-    if (!email.trim()) return;
-    
-    setIsLoading(true);
+  const handleSelectTool = (tool: Tool) => {
+    setSelectedTool(tool);
     setResult(null);
     setError(null);
-    
-    try {
-      const response = await lookupPersonMutation.mutateAsync({ email });
-      setResult(response);
-      setResultType("contact");
-      setActiveTab("formatted"); // Now we default to formatted for contact details
-    } catch (err: unknown) {
-      const errorMessage = err instanceof Error ? err.message : "An unknown error occurred";
-      setError(errorMessage);
-    } finally {
-      setIsLoading(false);
+    // Clear discover persons specific fields when switching tools
+    if (tool.id !== 'discover-persons') {
+      setTitle("");
+      setSeniority("");
+      setCountry("");
     }
   };
 
-  const handleGetAccountDetails = async () => {
-    if (!domain.trim()) return;
-    
-    setIsLoading(true);
-    setResult(null);
-    setError(null);
-    
-    try {
-      const response = await lookupAccountMutation.mutateAsync({ domain });
-      setResult(response);
-      setResultType("account");
-      setActiveTab("formatted"); // Now we default to formatted for account details
-    } catch (err: unknown) {
-      const errorMessage = err instanceof Error ? err.message : "An unknown error occurred";
-      setError(errorMessage);
-    } finally {
-      setIsLoading(false);
-    }
-  };
+  const handleRunTool = async () => {
+    if (!selectedTool) return;
 
-  const handleGetAIResearch = async () => {
-    if (!domain.trim()) return;
-    
     setIsLoading(true);
     setResult(null);
     setError(null);
-    
+
     try {
-      const response = await getAIResearchMutation.mutateAsync({ domain });
+      let response;
+      if (selectedTool.id === 'person-details') {
+        response = await getPersonDetailsMutation.mutateAsync({ email });
+      } else if (selectedTool.id === 'account-details') {
+        response = await getAccountDetailsMutation.mutateAsync({ domain });
+      } else if (selectedTool.id === 'ai-research') {
+        response = await getAIResearchMutation.mutateAsync({ domain });
+      } else if (selectedTool.id === 'discover-persons') {
+        // Build parameters object, only including non-empty values
+        const params: any = { provider: 'apollo' }; // default provider
+        if (domain) params.company_domain = domain;
+        if (title) params.title = title;
+        if (seniority) params.seniority = seniority;
+        if (country) params.country = country;
+        
+        response = await discoverPersonsMutation.mutateAsync(params);
+      } else if (selectedTool.id === 'person-activities') {
+        response = await getPersonActivitiesMutation.mutateAsync({ email });
+      } else if (selectedTool.id === 'account-activities') {
+        response = await getAccountActivitiesMutation.mutateAsync({ domain });
+      } else if (selectedTool.id === 'account-top-users') {
+        response = await getAccountTopUsersMutation.mutateAsync({ domain });
+      }
       setResult(response);
-      setResultType("research");
-      setActiveTab("formatted"); // Default to formatted for AI research
     } catch (err) {
       setError(err instanceof Error ? err.message : "An unknown error occurred");
     } finally {
@@ -76,676 +148,839 @@ export default function ApiTester() {
     }
   };
 
-  // Function to format markdown links
-  const formatMarkdownLinks = (text: string) => {
-    // Replace markdown links with HTML links
-    // Pattern: [link text](url)
-    return text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, (match, text, url) => {
-      return `<a href="${url}" target="_blank" rel="noopener noreferrer" class="text-blue-400 hover:underline">${text}</a>`;
-    });
-  };
+  // Group tools by category
+  const toolsByCategory = availableTools.reduce((acc, tool) => {
+    if (!acc[tool.category]) {
+      acc[tool.category] = [];
+    }
+    acc[tool.category]!.push(tool);
+    return acc;
+  }, {} as Record<string, Tool[]>);
 
-  // Function to render formatted contact details in a LinkedIn-inspired layout
-  const renderFormattedContactDetails = () => {
+  // --- Formatted Result Renderers ---
+
+    const renderFormattedPersonDetails = () => {
     if (!result) return <p className="text-gray-400">No results yet</p>;
-    
-    try {
-      // Extract contact data from the result
-      type ContactDataType = {
-        name?: string;
-        full_name?: string;
-        first_name?: string;
-        last_name?: string;
-        title?: string;
-        company?: string;
-        city?: string;
-        state?: string;
-        country?: string;
-        email?: string;
-        phone?: string;
-        linkedin_handle?: string;
-        twitter_handle?: string;
-        seniority?: string;
-        contactDetails?: string;
-        avatar_url?: string;
-        [key: string]: unknown;
-      };
-
-      const contactData = Array.isArray(result) && result.length > 0 ? 
-        result[0] as ContactDataType : null;
-      
-      const contactDetails = contactData?.contactDetails ? 
-        JSON.parse(contactData.contactDetails) as { 
-          photo?: string; 
-          bio?: string; 
-          skills?: string[];
-          [key: string]: unknown;
-        } : null;
-      
-      if (!contactData) {
-        return <p className="text-gray-400">No contact data available</p>;
-      }
-      
-      // Default image if no photo available
-      const defaultImage = "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png";
-      // Try different fields for avatar
-      const photo = contactData.avatar_url ?? contactDetails?.photo ?? defaultImage;
-      
-      // Try different name fields that might be available
-      const displayName = contactData.full_name ?? 
-        contactData.name ?? 
-        (contactData.first_name && contactData.last_name 
-          ? `${contactData.first_name} ${contactData.last_name}` 
-          : null) ?? 
-        "Unknown Name";
-      
+
+    // Handle error responses
+    if (result?.error) {
       return (
-        <div className="bg-zinc-900 rounded-lg overflow-hidden shadow-xl">
-          {/* Header with background cover photo */}
-          <div className="h-32 bg-gradient-to-r from-blue-900 to-purple-900"></div>
-          
-          {/* Profile section */}
-          <div className="relative px-6 pb-6 pt-16">
-            {/* Profile picture */}
-            <div className="absolute -top-24 left-6">
-              <img 
-                src={photo} 
-                alt={displayName}
-                className="w-32 h-32 rounded-full border-4 border-zinc-900 bg-zinc-800 object-cover"
-              />
+        <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-4">
+          <div className="flex items-center gap-2 mb-2">
+            <span className="text-yellow-400 text-lg">⚠️</span>
+            <h3 className="text-yellow-400 font-medium text-sm">Person Lookup Issue</h3>
+          </div>
+          <p className="text-yellow-300 text-xs mb-2">{result.message}</p>
+          <p className="text-yellow-200 text-xs">{result.suggestion}</p>
+        </div>
+      );
+    }
+
+    // Handle enriched person data fallback
+    let person = result?.person ?? (Array.isArray(result) && result.length > 0 ? result[0] : result) ?? {};
+    let showEnrichmentNotice = false;
+    
+    if (result?.enriched && result?.person) {
+      person = result.person;
+      showEnrichmentNotice = true;
+    }
+
+    if (!person || Object.keys(person).length === 0) {
+      return <p className="text-gray-400">Person not found or empty response.</p>;
+    }
+
+    // Extract person data from new payload structure
+    const displayName = person.name || [person.first_name, person.last_name].filter(Boolean).join(' ') || "Unknown";
+    const title = person.title;
+    const email = person.email;
+    const avatar = person.avatar || "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png";
+    const companyDomain = person.company_domain;
+    const activities = person.activities || 0;
+    
+    // Location from nested object
+    const location = person.location ? 
+      [person.location.city, person.location.state, person.location.country].filter(Boolean).join(', ') : '';
+    
+    // Social links from nested object
+    const linkedinHandle = person.socials?.linkedin_handle;
+    const twitterHandle = person.socials?.twitter_handle;
+    const crunchbaseHandle = person.socials?.crunchbase_handle;
+    const website = person.socials?.website;
+    
+    // Scoring data
+    const customerFit = person.customer_fit;
+    const likelihoodToBuy = person.likelihood_to_buy;
+
+    return (
+      <div className="space-y-4">
+        {showEnrichmentNotice && (
+          <div className="bg-blue-500/20 border border-blue-500/30 rounded-lg p-3">
+            <div className="flex items-center gap-2 mb-1">
+              <span className="text-blue-400 text-sm">ℹ️</span>
+              <h3 className="text-blue-400 font-medium text-xs">Using Person Lookup Data</h3>
             </div>
+            <p className="text-blue-300 text-xs">{result.message}</p>
+          </div>
+        )}
+        
+        <div className="bg-zinc-800/90 backdrop-blur-sm border border-zinc-700/50 rounded-xl p-4 shadow-2xl">
+          {/* Header with Avatar */}
+          <div className="flex items-center gap-3 mb-4">
+            <img 
+              src={avatar} 
+              alt={displayName}
+              className="w-12 h-12 rounded-full border-2 border-zinc-600 bg-zinc-700 object-cover flex-shrink-0"
+            />
             
-            {/* Info section with margin to accommodate profile picture */}
-            <div className="mt-16">
-              {/* Name and title */}
-              <div className="mb-4">
-                <h1 className="text-2xl font-bold text-white">{displayName}</h1>
-                <p className="text-blue-400 text-lg">{contactData.title ?? "Unknown Title"}</p>
-                {contactData.company && <p className="text-gray-400">{contactData.company}</p>}
-              </div>
-              
-              {/* Location */}
-              {(contactData.city || contactData.state || contactData.country) && (
-                <div className="flex items-center mb-3 text-gray-300">
-                  <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
-                    <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
-                  </svg>
-                  <span>{[contactData.city, contactData.state, contactData.country].filter(Boolean).join(", ")}</span>
-                </div>
+            <div className="flex-1 min-w-0">
+              <h2 className="text-lg font-bold text-white truncate">{displayName}</h2>
+              {title && <p className="text-blue-400 text-sm">{title}</p>}
+              {companyDomain && (
+                <p className="text-zinc-400 text-xs">@{companyDomain}</p>
               )}
-              
-              {/* Contact info */}
-              <div className="space-y-2 mb-4">
-                {contactData.email && (
-                  <div className="flex items-center text-gray-300">
-                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
-                      <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
-                      <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
-                    </svg>
-                    <span>{contactData.email}</span>
-                  </div>
-                )}
-                
-                {contactData.phone && (
-                  <div className="flex items-center text-gray-300">
-                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
-                      <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
-                    </svg>
-                    <span>{contactData.phone}</span>
-                  </div>
-                )}
-                
-                {contactData.linkedin_handle && (
-                  <div className="flex items-center text-gray-300">
-                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
-                      <path d="M16.338 16.338H13.67V12.16c0-1-.02-2.285-1.39-2.285-1.39 0-1.601 1.087-1.601 2.21v4.253h-2.66V8.315h2.56v1.17h.035c.358-.674 1.228-1.387 2.528-1.387 2.7 0 3.2 1.778 3.2 4.091v4.149h-.004zM7.003 7.142c-.85 0-1.535-.685-1.535-1.53 0-.844.685-1.53 1.535-1.53.85 0 1.535.686 1.535 1.53 0 .845-.685 1.53-1.535 1.53zm1.33 9.196h-2.66V8.315h2.66v8.023z" />
-                    </svg>
-                    <a 
-                      href={`https://linkedin.com/in/${contactData.linkedin_handle}`} 
-                      target="_blank" 
-                      rel="noopener noreferrer"
-                      className="text-blue-400 hover:underline"
-                    >
-                      {contactData.linkedin_handle}
-                    </a>
-                  </div>
-                )}
-                
-                {contactData.twitter_handle && (
-                  <div className="flex items-center text-gray-300">
-                    <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
-                      <path d="M6.29 18.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0020 3.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.073 4.073 0 01.8 7.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 010 16.407a11.615 11.615 0 006.29 1.84" />
-                    </svg>
-                    <a 
-                      href={`https://twitter.com/${contactData.twitter_handle}`} 
-                      target="_blank" 
-                      rel="noopener noreferrer"
-                      className="text-blue-400 hover:underline"
-                    >
-                      @{contactData.twitter_handle}
-                    </a>
-                  </div>
-                )}
-              </div>
-              
-              {/* Additional details */}
-              {contactData.seniority && (
-                <div className="mb-3">
-                  <span className="bg-blue-900 text-blue-200 px-3 py-1 rounded-full text-sm">
-                    {contactData.seniority} Seniority
-                  </span>
-                </div>
+            </div>
+            
+            {/* Social Links as Clickable Logos */}
+            <div className="flex items-center gap-2">
+              {linkedinHandle && (
+                <a 
+                  href={`https://linkedin.com/in/${linkedinHandle}`}
+                  target="_blank" 
+                  rel="noopener noreferrer"
+                  className="text-blue-400 hover:text-blue-300 transition-colors"
+                  title="LinkedIn Profile"
+                >
+                  <Linkedin size={16} />
+                </a>
               )}
-              
-              {/* Bio/Summary if available */}
-              {contactDetails?.bio && (
-                <div className="bg-zinc-800 rounded-lg p-4 mb-4">
-                  <h3 className="text-lg font-medium text-white mb-2">About</h3>
-                  <p className="text-gray-300">{contactDetails.bio}</p>
-                </div>
+              {twitterHandle && (
+                <a 
+                  href={`https://twitter.com/${twitterHandle}`}
+                  target="_blank" 
+                  rel="noopener noreferrer"
+                  className="text-blue-400 hover:text-blue-300 transition-colors"
+                  title="Twitter Profile"
+                >
+                  <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
+                    <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
+                  </svg>
+                </a>
               )}
-              
-              {/* Skills if available */}
-              {contactDetails?.skills && contactDetails.skills.length > 0 && (
-                <div className="bg-zinc-800 rounded-lg p-4">
-                  <h3 className="text-lg font-medium text-white mb-2">Skills</h3>
-                  <div className="flex flex-wrap gap-2">
-                    {contactDetails.skills.map((skill: string, index: number) => (
-                      <span key={index} className="bg-zinc-700 text-gray-300 px-3 py-1 rounded-full text-sm">
-                        {skill}
-                      </span>
-                    ))}
-                  </div>
-                </div>
+              {website && (
+                <a 
+                  href={website}
+                  target="_blank" 
+                  rel="noopener noreferrer"
+                  className="text-zinc-400 hover:text-zinc-300 transition-colors"
+                  title="Website"
+                >
+                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
+                    <circle cx="12" cy="12" r="10"/>
+                    <line x1="2" y1="12" x2="22" y2="12"/>
+                    <path d="m8 12a8 8 0 0 0 8 0"/>
+                    <path d="m8 12a8 8 0 0 1 8 0"/>
+                  </svg>
+                </a>
               )}
             </div>
           </div>
+
+          {/* Contact Information - Compact Grid */}
+          <div className="grid grid-cols-1 gap-2">
+            {email && (
+              <div className="flex items-center gap-2 px-3 py-2 bg-white/5 rounded-lg">
+                <Mail size={14} className="text-zinc-400 flex-shrink-0" />
+                <span className="text-zinc-300 text-sm truncate">{email}</span>
+              </div>
+            )}
+            
+            {location && (
+              <div className="flex items-center gap-2 px-3 py-2 bg-white/5 rounded-lg">
+                <MapPin size={14} className="text-zinc-400 flex-shrink-0" />
+                <span className="text-zinc-300 text-sm">{location}</span>
+              </div>
+            )}
+            
+            {activities > 0 && (
+              <div className="flex items-center gap-2 px-3 py-2 bg-white/5 rounded-lg">
+                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="text-zinc-400 flex-shrink-0">
+                  <path d="M12 20v-6M6 20V10M18 20V4"/>
+                </svg>
+                <span className="text-zinc-300 text-sm">{activities.toLocaleString()} activities</span>
+              </div>
+            )}
+          </div>
         </div>
-      );
-    } catch (error) {
-      console.error("Error rendering contact details:", error);
-      return <p className="text-red-400">Error rendering contact details</p>;
-    }
-  };
-  
-  // Function to render formatted account details in a LinkedIn-inspired layout
+      </div>
+    );
+  }
+
   const renderFormattedAccountDetails = () => {
     if (!result) return <p className="text-gray-400">No results yet</p>;
+
+    // Handle error responses
+    if (result?.error) {
+      return (
+        <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-4">
+          <div className="flex items-center gap-2 mb-2">
+            <span className="text-yellow-400 text-lg">⚠️</span>
+            <h3 className="text-yellow-400 font-medium text-sm">Account Lookup Issue</h3>
+          </div>
+          <p className="text-yellow-300 text-xs mb-2">{result.message}</p>
+          <p className="text-yellow-200 text-xs">{result.suggestion}</p>
+        </div>
+      );
+    }
+
+    // Handle enriched account data fallback
+    let account = result?.account ?? result?.company ?? (Array.isArray(result) && result.length > 0 ? result[0] : result) ?? {};
+    let showEnrichmentNotice = false;
     
-    try {
-      // Extract account data from the result
-      type AccountDataType = {
-        name?: string;
-        domain?: string;
-        industry?: string;
-        city?: string;
-        state?: string;
-        country?: string;
-        logo_url?: string; 
-        employees_count?: number | string;
-        estimated_revenue?: number | string;
-        funding?: number | string;
-        founded_year?: number | string;
-        description?: string;
-        tags?: string[];
-        accountDetails?: string;
-        [key: string]: unknown;
-      };
-
-      type ContactType = {
-        name?: string;
-        title?: string;
-        email?: string;
-        linkedin_handle?: string;
-        seniority?: string;
-        [key: string]: unknown;
-      };
-
-      const accountData = Array.isArray(result) && result.length > 0 ? 
-        result[0] as AccountDataType : null;
+    if (result?.enriched && result?.account) {
+      account = result.account;
+      showEnrichmentNotice = true;
+    }
+    
+    if (!account || Object.keys(account).length === 0) {
+      return <p className="text-gray-400">Account not found or empty response.</p>;
+    }
+    
+    const defaultLogo = "https://cdn-icons-png.flaticon.com/512/3281/3281315.png";
+    const logo = account.logo ?? defaultLogo;
+    const companyName = account.name ?? "Unknown Company";
+    const industry = account.industry ?? "No industry provided";
+    const domain = account.domain;
+    const location = [account.location?.city, account.location?.state, account.location?.country].filter(Boolean).join(', ');
+    const companySize = account.employees_count;
+    const founded = account.founded_year;
+    const raisedAmount = account.raised_amount;
+    const description = account.description;
+    
+    // Social links
+    const linkedinHandle = account.socials?.linkedin_handle;
+    const twitterHandle = account.socials?.twitter_handle;
+    const crunchbaseHandle = account.socials?.crunchbase_handle;
+    const website = account.socials?.website;
+
+    return (
+      <div className="space-y-4">
+        {showEnrichmentNotice && (
+          <div className="bg-blue-500/20 border border-blue-500/30 rounded-lg p-3">
+            <div className="flex items-center gap-2 mb-1">
+              <span className="text-blue-400 text-sm">ℹ️</span>
+              <h3 className="text-blue-400 font-medium text-xs">Using Account Lookup Data</h3>
+            </div>
+            <p className="text-blue-300 text-xs">{result.message}</p>
+          </div>
+        )}
         
-      const accountDetails = accountData?.accountDetails ? 
-        JSON.parse(accountData.accountDetails) as {
-          contacts?: ContactType[];
-          [key: string]: unknown;
-        } : null;
-      
-      if (!accountData) {
-        return <p className="text-gray-400">No account data available</p>;
-      }
-      
-      // Get the company logo or use a default
-      const defaultLogo = "https://cdn-icons-png.flaticon.com/512/3281/3281315.png";
-      const logo = accountData.logo_url ?? defaultLogo;
-      
-      return (
-        <div className="bg-zinc-900 rounded-lg overflow-hidden shadow-xl">
-          {/* Header with background cover photo */}
-          <div className="h-32 bg-gradient-to-r from-indigo-900 to-blue-900"></div>
+        <div className="bg-zinc-800/90 backdrop-blur-sm border border-zinc-700/50 rounded-xl p-5 shadow-2xl">
+        {/* Header */}
+        <div className="flex items-center gap-3 mb-4">
+          <img 
+            src={logo} 
+            alt={`${companyName} logo`}
+            className="w-12 h-12 rounded-lg bg-white/10 p-2 object-contain flex-shrink-0"
+          />
+          <div className="flex-1 min-w-0">
+            <h2 className="text-xl font-bold text-white truncate">{companyName}</h2>
+            <p className="text-blue-400 text-sm">{industry}</p>
+            {domain && <p className="text-zinc-400 text-xs">{domain}</p>}
+          </div>
           
-          {/* Company profile section */}
-          <div className="relative px-6 pb-6 pt-16">
-            {/* Company logo */}
-            <div className="absolute -top-24 left-6">
-              <div className="w-32 h-32 flex items-center justify-center rounded-lg border-4 border-zinc-900 bg-white">
-                <img 
-                  src={logo} 
-                  alt={accountData.name ?? "Company Logo"} 
-                  className="max-w-[80%] max-h-[80%] object-contain"
-                />
-              </div>
+          {/* Social Links */}
+          <div className="flex items-center gap-2">
+            {linkedinHandle && (
+              <a 
+                href={`https://linkedin.com/company/${linkedinHandle}`}
+                target="_blank" 
+                rel="noopener noreferrer"
+                className="text-blue-400 hover:text-blue-300 transition-colors"
+                title="LinkedIn Profile"
+              >
+                <Linkedin size={16} />
+              </a>
+            )}
+            {twitterHandle && (
+              <a 
+                href={`https://twitter.com/${twitterHandle}`}
+                target="_blank" 
+                rel="noopener noreferrer"
+                className="text-blue-400 hover:text-blue-300 transition-colors"
+                title="Twitter Profile"
+              >
+                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
+                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
+                </svg>
+              </a>
+            )}
+                         {website && (
+               <a 
+                 href={website}
+                 target="_blank" 
+                 rel="noopener noreferrer"
+                 className="text-zinc-400 hover:text-zinc-300 transition-colors"
+                 title="Website"
+               >
+                 <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2">
+                   <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"/>
+                   <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"/>
+                 </svg>
+               </a>
+             )}
+             {crunchbaseHandle && (
+               <a 
+                 href={`https://crunchbase.com/${crunchbaseHandle}`}
+                 target="_blank" 
+                 rel="noopener noreferrer"
+                 className="text-blue-500 hover:text-blue-400 transition-colors"
+                 title="Crunchbase Profile"
+               >
+                 <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
+                   <path d="M21.6 12c0 5.3-4.3 9.6-9.6 9.6S2.4 17.3 2.4 12 6.7 2.4 12 2.4s9.6 4.3 9.6 9.6zM8.4 8.1v7.8c0 .3.2.5.5.5h1.5c.3 0 .5-.2.5-.5v-3h1.8c2.1 0 3.8-1.7 3.8-3.8S14.8 5.3 12.7 5.3H8.9c-.3 0-.5.2-.5.5v2.3zm3-1.8h1.3c.7 0 1.3.6 1.3 1.3s-.6 1.3-1.3 1.3h-1.3V6.3z"/>
+                 </svg>
+               </a>
+             )}
+          </div>
+        </div>
+
+        {/* Details Grid */}
+        <div className="grid grid-cols-2 gap-3 mb-4">
+          {location && (
+            <div className="flex items-center gap-2 px-3 py-2 bg-white/5 rounded-lg">
+              <MapPin size={14} className="text-zinc-400 flex-shrink-0" />
+              <span className="text-zinc-300 text-sm truncate">{location}</span>
             </div>
-            
-            {/* Info section with margin to accommodate logo */}
-            <div className="mt-16">
-              {/* Company name and industry */}
-              <div className="mb-4">
-                <h1 className="text-2xl font-bold text-white">
-                  {accountData.name ?? accountData.domain ?? "Unknown Company"}
-                </h1>
-                {accountData.industry && (
-                  <p className="text-blue-400 text-lg">{accountData.industry}</p>
-                )}
-                {accountData.domain && (
-                  <p className="text-gray-400">
-                    <a 
-                      href={`https://${accountData.domain}`} 
-                      target="_blank" 
-                      rel="noopener noreferrer"
-                      className="hover:underline"
-                    >
-                      {accountData.domain}
-                    </a>
-                  </p>
-                )}
-              </div>
-              
-              {/* Location */}
-              {(accountData.city || accountData.state || accountData.country) && (
-                <div className="flex items-center mb-3 text-gray-300">
-                  <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
-                    <path fillRule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clipRule="evenodd" />
-                  </svg>
-                  <span>{[accountData.city, accountData.state, accountData.country].filter(Boolean).join(", ")}</span>
-                </div>
-              )}
-              
-              {/* Company size and other metrics */}
-              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
-                {accountData.employees_count && (
-                  <div className="bg-zinc-800 rounded-lg p-4">
-                    <h3 className="text-md font-medium text-gray-400 mb-1">Company Size</h3>
-                    <p className="text-xl text-white">{accountData.employees_count} employees</p>
-                  </div>
-                )}
-                
-                {accountData.estimated_revenue && (
-                  <div className="bg-zinc-800 rounded-lg p-4">
-                    <h3 className="text-md font-medium text-gray-400 mb-1">Est. Annual Revenue</h3>
-                    <p className="text-xl text-white">${accountData.estimated_revenue}</p>
-                  </div>
-                )}
-                
-                {accountData.funding && (
-                  <div className="bg-zinc-800 rounded-lg p-4">
-                    <h3 className="text-md font-medium text-gray-400 mb-1">Total Funding</h3>
-                    <p className="text-xl text-white">${accountData.funding}</p>
+          )}
+          
+          {companySize && (
+            <div className="flex items-center gap-2 px-3 py-2 bg-white/5 rounded-lg">
+              <Users size={14} className="text-zinc-400 flex-shrink-0" />
+              <span className="text-zinc-300 text-sm">{companySize} employees</span>
+            </div>
+          )}
+          
+          {founded && (
+            <div className="flex items-center gap-2 px-3 py-2 bg-white/5 rounded-lg">
+              <Building2 size={14} className="text-zinc-400 flex-shrink-0" />
+              <span className="text-zinc-300 text-sm">Founded {founded}</span>
+            </div>
+          )}
+          
+          {raisedAmount && (
+            <div className="flex items-center gap-2 px-3 py-2 bg-white/5 rounded-lg">
+              <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" className="text-zinc-400 flex-shrink-0">
+                <circle cx="12" cy="12" r="10"/>
+                <path d="M16 8l-4 4-4-4"/>
+              </svg>
+              <span className="text-zinc-300 text-sm">${(raisedAmount / 1000000).toFixed(1)}M raised</span>
+            </div>
+          )}
+        </div>
+
+        {/* Description */}
+        {description && (
+          <div className="bg-white/5 rounded-lg p-3 border border-white/10">
+            <p className="text-zinc-300 text-sm leading-relaxed line-clamp-3">{description}</p>
+          </div>
+        )}
+        </div>
+      </div>
+    );
+  };
+
+  const renderFormattedResearch = () => {
+    if (!result || !Array.isArray(result) || result.length === 0) {
+      return <p className="text-gray-400">No research results found.</p>;
+    }
+
+    return (
+      <div className="space-y-4">
+        {result.map((item, index) => (
+          <div key={index} className="bg-zinc-900/50 p-4 rounded-lg">
+            <h3 className="font-bold text-lg text-white mb-2">{item.title}</h3>
+            <p className="text-zinc-300 mb-2">{item.content}</p>
+            {item.url && (
+              <a 
+                href={item.url} 
+                target="_blank" 
+                rel="noopener noreferrer" 
+                className="text-blue-400 hover:underline text-sm"
+              >
+                Read more →
+              </a>
+            )}
+          </div>
+        ))}
+      </div>
+    );
+  };
+
+  const renderFormattedPersonActivities = () => {
+    // Handle error responses
+    if (result?.error) {
+      return (
+        <div className="bg-yellow-500/20 border border-yellow-500/30 rounded-lg p-4">
+          <div className="flex items-center gap-2 mb-2">
+            <span className="text-yellow-400 text-lg">⚠️</span>
+            <h3 className="text-yellow-400 font-medium text-sm">Endpoint Not Available</h3>
+          </div>
+          <p className="text-yellow-300 text-xs mb-2">{result.message}</p>
+          <p className="text-yellow-200 text-xs">{result.suggestion}</p>
+        </div>
+      );
+    }
+
+    if (!result?.data || !Array.isArray(result.data) || result.data.length === 0) {
+      return <p className="text-gray-400">No activities found.</p>;
+    }
+
+    // Group activities by date for better organization
+    const groupedActivities = result.data.reduce((groups: any, activity: any) => {
+      const date = new Date(activity.event_timestamp).toDateString();
+      if (!groups[date]) groups[date] = [];
+      groups[date].push(activity);
+      return groups;
+    }, {});
+
+    const getActivityIcon = (eventType: string) => {
+      const type = eventType.toLowerCase();
+      if (type.includes('email')) return '📧';
+      if (type.includes('click') || type.includes('link')) return '🔗';
+      if (type.includes('page') || type.includes('visit')) return '👁️';
+      if (type.includes('download')) return '⬇️';
+      if (type.includes('form') || type.includes('submit')) return '📝';
+      if (type.includes('login') || type.includes('signup')) return '🔐';
+      return '📊';
+    };
+
+    const getActivityColor = (eventType: string) => {
+      const type = eventType.toLowerCase();
+      if (type.includes('email')) return 'text-blue-400';
+      if (type.includes('click') || type.includes('link')) return 'text-purple-400';
+      if (type.includes('page') || type.includes('visit')) return 'text-green-400';
+      if (type.includes('download')) return 'text-orange-400';
+      if (type.includes('form') || type.includes('submit')) return 'text-yellow-400';
+      if (type.includes('login') || type.includes('signup')) return 'text-red-400';
+      return 'text-zinc-400';
+    };
+
+    return (
+      <div className="space-y-4">
+        <div className="flex items-center justify-between mb-4">
+          <h3 className="text-white font-medium text-sm">
+            {result.data.length} activit{result.data.length !== 1 ? 'ies' : 'y'} found
+          </h3>
+          {result.pagination && (
+            <span className="text-white/60 text-xs">
+              Page {result.pagination.page || 1}
+            </span>
+          )}
+        </div>
+
+        {Object.entries(groupedActivities).map(([date, activities]: [string, any]) => (
+          <div key={date} className="space-y-2">
+            <div className="text-white/80 text-xs font-medium uppercase tracking-wide border-b border-white/10 pb-1">
+              {date}
+            </div>
+            {activities.map((activity: any, index: number) => (
+              <div key={activity.id || index} className="bg-zinc-800/60 backdrop-blur-sm border border-zinc-700/50 rounded-lg p-3">
+                <div className="flex items-start gap-3">
+                  <div className="text-lg flex-shrink-0 mt-0.5">
+                    {getActivityIcon(activity.event || activity.event_display || '')}
                   </div>
-                )}
-                
-                {accountData.founded_year && (
-                  <div className="bg-zinc-800 rounded-lg p-4">
-                    <h3 className="text-md font-medium text-gray-400 mb-1">Founded</h3>
-                    <p className="text-xl text-white">{accountData.founded_year}</p>
+                  <div className="flex-1 min-w-0">
+                    <div className="flex items-start justify-between gap-2 mb-1">
+                      <h4 className={`font-medium text-sm ${getActivityColor(activity.event || activity.event_display || '')}`}>
+                        {activity.event_display || activity.event || 'Unknown Activity'}
+                      </h4>
+                      <span className="text-white/50 text-xs whitespace-nowrap">
+                        {new Date(activity.event_timestamp).toLocaleTimeString([], { 
+                          hour: '2-digit', 
+                          minute: '2-digit'
+                        })}
+                      </span>
+                    </div>
+                    {activity.properties && (
+                      <div className="space-y-1">
+                        {activity.properties.page_url && (
+                          <p className="text-white/70 text-xs truncate">
+                            <span className="text-white/50">URL:</span> {activity.properties.page_url}
+                          </p>
+                        )}
+                        {activity.properties.page_title && (
+                          <p className="text-white/70 text-xs truncate">
+                            <span className="text-white/50">Page:</span> {activity.properties.page_title}
+                          </p>
+                        )}
+                        {activity.properties.email_subject && (
+                          <p className="text-white/70 text-xs truncate">
+                            <span className="text-white/50">Subject:</span> {activity.properties.email_subject}
+                          </p>
+                        )}
+                      </div>
+                    )}
                   </div>
-                )}
+                </div>
               </div>
-              
-              {/* Company description if available */}
-              {accountData.description && (
-                <div className="bg-zinc-800 rounded-lg p-4 mb-4">
-                  <h3 className="text-lg font-medium text-white mb-2">About</h3>
-                  <p className="text-gray-300">{accountData.description}</p>
+            ))}
+          </div>
+        ))}
+      </div>
+    );
+  };
+
+  const renderFormattedAccountActivities = () => {
+    if (!result || !Array.isArray(result) || result.length === 0) {
+      return <p className="text-gray-400">No activities found.</p>;
+    }
+
+    return (
+      <div className="space-y-4">
+        {result.map((activity, index) => (
+          <div key={index} className="bg-zinc-900/50 p-4 rounded-lg">
+            <h3 className="font-bold text-lg text-white">{activity.event_display}</h3>
+            <p className="text-zinc-400">{new Date(activity.event_timestamp).toLocaleString()}</p>
+          </div>
+        ))}
+      </div>
+    );
+  };
+
+  const renderFormattedAccountTopUsers = () => {
+    if (!result || !Array.isArray(result) || result.length === 0) {
+      return <p className="text-gray-400">No users found.</p>;
+    }
+
+    return (
+      <div className="space-y-4">
+        {result.map((user, index) => (
+          <div key={index} className="bg-zinc-900/50 p-4 rounded-lg">
+            <h3 className="font-bold text-lg text-white">{user.name}</h3>
+            <p className="text-blue-400">{user.title}</p>
+            <p className="text-zinc-400">{user.email}</p>
+          </div>
+        ))}
+      </div>
+    );
+  };
+
+  const renderFormattedDiscoverPersons = () => {
+    if (!result?.data || !Array.isArray(result.data) || result.data.length === 0) {
+      return <p className="text-gray-400">No prospects found.</p>;
+    }
+
+    return (
+      <div className="space-y-2">
+        <div className="flex items-center justify-between mb-3">
+          <h3 className="text-white font-medium text-sm">Found {result.data.length} contact{result.data.length !== 1 ? 's' : ''}</h3>
+          {result.pagination && (
+            <span className="text-white/60 text-xs">
+              Page {result.pagination.page || 1}
+            </span>
+          )}
+        </div>
+        <div className="grid grid-cols-1 gap-2">
+          {result.data.map((person: any, index: number) => (
+            <div key={person.id || index} className="bg-zinc-800/60 backdrop-blur-sm border border-zinc-700/50 rounded-lg p-3">
+              <div className="flex items-center gap-3">
+                <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center text-white font-semibold text-xs flex-shrink-0">
+                  {person.first_name?.[0] || '?'}{person.last_name?.[0] || ''}
                 </div>
-              )}
-              
-              {/* Key contacts section (if contacts are available in accountDetails) */}
-              {accountDetails?.contacts && accountDetails.contacts.length > 0 && (
-                <div className="bg-zinc-800 rounded-lg p-4">
-                  <h3 className="text-lg font-medium text-white mb-3">Key Contacts</h3>
-                  <div className="space-y-4">
-                    {accountDetails.contacts.slice(0, 5).map((contact, index) => (
-                      <div key={index} className="flex items-center">
-                        <div className="w-10 h-10 bg-blue-900 rounded-full flex items-center justify-center mr-3">
-                          <span className="text-white font-medium">
-                            {contact.name ? contact.name.charAt(0).toUpperCase() : "?"}
-                          </span>
+                <div className="flex-1 min-w-0">
+                  <div className="flex items-center gap-2 mb-1">
+                    <h3 className="font-semibold text-white text-sm truncate">
+                      {person.first_name} {person.last_name}
+                    </h3>
+                    {person.linkedin_url && (
+                      <a 
+                        href={person.linkedin_url} 
+                        target="_blank" 
+                        rel="noopener noreferrer"
+                        className="w-4 h-4 bg-blue-600/20 rounded flex items-center justify-center hover:bg-blue-600/30 transition-colors"
+                      >
+                        <Linkedin size={8} className="text-blue-400" />
+                      </a>
+                    )}
+                    <span className="text-blue-400 text-xs">•</span>
+                    <p className="text-blue-400 text-xs truncate">{person.title}</p>
+                  </div>
+                  <div className="flex items-center justify-between">
+                    <p className="text-zinc-400 text-xs truncate">
+                      {person.company_name} • {person.company_domain}
+                    </p>
+                    <div className="flex items-center gap-1 ml-2">
+                      {person.email && (
+                        <div className="w-5 h-5 bg-green-500/20 rounded flex items-center justify-center">
+                          <Mail size={10} className="text-green-400" />
                         </div>
-                        <div>
-                          <p className="text-white font-medium">{contact.name || "Unknown Name"}</p>
-                          <p className="text-gray-400 text-sm">{contact.title || "Unknown Title"}</p>
+                      )}
+                      {person.phone && (
+                        <div className="w-5 h-5 bg-blue-500/20 rounded flex items-center justify-center text-blue-400 text-xs">
+                          📞
                         </div>
-                      </div>
-                    ))}
-                  </div>
-                </div>
-              )}
-              
-              {/* Tags or categories */}
-              {accountData.tags && accountData.tags.length > 0 && (
-                <div className="mt-4">
-                  <div className="flex flex-wrap gap-2">
-                    {accountData.tags.map((tag, index) => (
-                      <span key={index} className="bg-zinc-700 text-gray-300 px-3 py-1 rounded-full text-sm">
-                        {tag}
+                      )}
+                      <span className="text-zinc-500 text-xs">
+                        Source: {person.provider}
                       </span>
-                    ))}
+                    </div>
                   </div>
                 </div>
-              )}
+              </div>
             </div>
+          ))}
+          <div className="mt-4 pt-3 border-t border-white/10 text-center">
+            <span className="text-zinc-500 text-xs italic">
+              Results limited to 3 for demo
+            </span>
           </div>
         </div>
-      );
-    } catch (error) {
-      console.error("Error rendering account details:", error);
-      return <p className="text-red-400">Error rendering account details</p>;
-    }
+      </div>
+    );
   };
 
-  // Function to render formatted research
-  const renderFormattedResearch = () => {
-    if (!result) return <p className="text-gray-400">No results yet</p>;
-    
-    // If this is a contact details result
-    if (resultType === "contact") {
-      return renderFormattedContactDetails();
-    }
-    
-    // If this is an account details result
-    if (resultType === "account") {
-      return renderFormattedAccountDetails();
-    }
-    
-    // For AI research (original implementation)
-    // If result is a string, format it with proper paragraphs and headers
-    if (typeof result === 'string') {
-      const researchText = result;
-      
-      // Process line by line to ensure each \n becomes a line break
-      // This will preserve the structure of the text better
-      const lines = researchText
-        .replace(/\\n/g, '\n')
-        .split('\n');
-      
-      // Create a container for the formatted content
-      const formattedContent: React.ReactNode[] = [];
-      let currentParagraph: string[] = [];
-      let listItems: string[] = [];
-      let isInList = false;
-      let key = 0;
-      
-      // Process line by line
-      lines.forEach((line, index) => {
-        // Check if this is a header line
-        const headerMatch = /^(#{1,3})\s+(.+)$/.exec(line);
-        if (headerMatch) {
-          // If we have accumulated paragraph text, add it first
-          if (currentParagraph.length > 0) {
-            const paraText = currentParagraph.join(' ');
-            formattedContent.push(
-              <p key={key++} className="text-gray-300 mb-3" dangerouslySetInnerHTML={{ __html: formatMarkdownLinks(paraText) }} />
-            );
-            currentParagraph = [];
-          }
-          
-          // If we were in a list, end it
-          if (isInList && listItems.length > 0) {
-            formattedContent.push(
-              <ul key={key++} className="list-disc pl-5 mb-3">
-                {listItems.map((item, i) => (
-                  <li key={i} className="text-gray-300 mb-1" dangerouslySetInnerHTML={{ __html: formatMarkdownLinks(item) }} />
-                ))}
-              </ul>
-            );
-            listItems = [];
-            isInList = false;
-          }
-          
-          // Add the header
-          const level = headerMatch[1]!.length;
-          const headerText = headerMatch[2]!;
-          const formattedText = formatMarkdownLinks(headerText);
-          
-          switch (level) {
-            case 1:
-              formattedContent.push(
-                <h1 key={key++} className="text-2xl font-bold text-blue-400 mt-6 mb-3" dangerouslySetInnerHTML={{ __html: formattedText }} />
-              );
-              break;
-            case 2:
-              formattedContent.push(
-                <h2 key={key++} className="text-xl font-bold text-indigo-400 mt-5 mb-3" dangerouslySetInnerHTML={{ __html: formattedText }} />
-              );
-              break;
-            case 3:
-              formattedContent.push(
-                <h3 key={key++} className="text-lg font-bold text-purple-400 mt-4 mb-2" dangerouslySetInnerHTML={{ __html: formattedText }} />
-              );
-              break;
-          }
-          return;
-        }
-        
-        // Check if this is a list item
-        if (line.trim().startsWith('- ')) {
-          // If we have accumulated paragraph text, add it first
-          if (currentParagraph.length > 0) {
-            const paraText = currentParagraph.join(' ');
-            formattedContent.push(
-              <p key={key++} className="text-gray-300 mb-3" dangerouslySetInnerHTML={{ __html: formatMarkdownLinks(paraText) }} />
-            );
-            currentParagraph = [];
-          }
-          
-          // Add to list items
-          isInList = true;
-          listItems.push(line.trim().substring(2));
-          return;
-        }
-        
-        // If we were in a list and now we're not
-        if (isInList && !line.trim().startsWith('- ') && line.trim() !== '') {
-          formattedContent.push(
-            <ul key={key++} className="list-disc pl-5 mb-3">
-              {listItems.map((item, i) => (
-                <li key={i} className="text-gray-300 mb-1" dangerouslySetInnerHTML={{ __html: formatMarkdownLinks(item) }} />
-              ))}
-            </ul>
-          );
-          listItems = [];
-          isInList = false;
-        }
-        
-        // Format special symbols and emojis in this line
-        let formattedLine = line;
-        
-        // Handle common emojis
-        const emojiMap = {
-          '✨': '<span class="text-yellow-300">✨</span>',
-          '💡': '<span class="text-yellow-300">💡</span>',
-          '📊': '<span class="text-blue-400">📊</span>',
-          '✅': '<span class="text-green-400">✅</span>',
-          '⭐': '<span class="text-yellow-300">⭐</span>',
-          '🔍': '<span class="text-blue-300">🔍</span>',
-          '📈': '<span class="text-green-400">📈</span>',
-          '🚀': '<span class="text-purple-400">🚀</span>',
-          '🎯': '<span class="text-red-400">🎯</span>',
-          '👋': '<span class="text-yellow-200">👋</span>',
-          '📝': '<span class="text-gray-300">📝</span>',
-          '🤔': '<span class="text-yellow-200">🤔</span>',
-          '🔗': '<span class="text-blue-300">🔗</span>',
-          '📱': '<span class="text-purple-300">📱</span>',
-          '🖥️': '<span class="text-blue-300">🖥️</span>',
-          '🏢': '<span class="text-gray-300">🏢</span>',
-        };
-        
-        // Replace emojis with styled span elements
-        Object.entries(emojiMap).forEach(([emoji, html]) => {
-          formattedLine = formattedLine.replace(new RegExp(emoji, 'g'), html);
-        });
-        
-        // Handle special sections like "💡 Insight" without making them bold
-        formattedLine = formattedLine.replace(/(💡\s*Insight|✅\s*Success|⭐\s*Why|🔍\s*Details)/g, (match) => {
-          return `<span class="text-yellow-300">${match}</span>`;
-        });
-        
-        // Handle sources with brackets
-        formattedLine = formattedLine.replace(/\[Source\]/g, '<span class="text-gray-400">[Source]</span>');
-        
-        // If line is not empty, add it to the current paragraph
-        if (line.trim() !== '') {
-          currentParagraph.push(formattedLine);
-        } 
-        // If line is empty and we have paragraph content, finish the paragraph
-        else if (currentParagraph.length > 0) {
-          const paraText = currentParagraph.join(' ');
-          formattedContent.push(
-            <p key={key++} className="text-gray-300 mb-3" dangerouslySetInnerHTML={{ __html: formatMarkdownLinks(paraText) }} />
-          );
-          currentParagraph = [];
-        }
-        
-        // For an empty line in the input, add an empty paragraph to maintain spacing
-        if (line.trim() === '' && !isInList && currentParagraph.length === 0) {
-          formattedContent.push(<div key={key++} className="h-3"></div>);
-        }
-      });
-      
-      // Add any remaining paragraph content
-      if (currentParagraph.length > 0) {
-        const paraText = currentParagraph.join(' ');
-        formattedContent.push(
-          <p key={key++} className="text-gray-300 mb-3" dangerouslySetInnerHTML={{ __html: formatMarkdownLinks(paraText) }} />
-        );
-      }
-      
-      // Add any remaining list items
-      if (isInList && listItems.length > 0) {
-        formattedContent.push(
-          <ul key={key++} className="list-disc pl-5 mb-3">
-            {listItems.map((item, i) => (
-              <li key={i} className="text-gray-300 mb-1" dangerouslySetInnerHTML={{ __html: formatMarkdownLinks(item) }} />
-            ))}
-          </ul>
+  const renderFormattedResult = () => {
+    if (!selectedTool) return null;
+
+    switch (selectedTool.id) {
+      case 'person-details':
+        return renderFormattedPersonDetails();
+      case 'account-details':
+        return renderFormattedAccountDetails();
+      case 'ai-research':
+        return renderFormattedResearch();
+      case 'discover-persons':
+        return renderFormattedDiscoverPersons();
+      case 'person-activities':
+        return renderFormattedPersonActivities();
+      case 'account-activities':
+        return renderFormattedAccountActivities();
+      case 'account-top-users':
+        return renderFormattedAccountTopUsers();
+      default:
+        return (
+          <p className="text-gray-400">
+            Formatted view is not available for this tool yet.
+          </p>
         );
-      }
-      
-      return <div className="space-y-0">{formattedContent}</div>;
     }
-    
-    // If it's not a string and not a recognized type, just render a message
-    return <p className="text-gray-400">Results are available in raw format</p>;
   };
 
   return (
-    <div className="container mx-auto px-4 py-8">
-      <h1 className="text-3xl font-bold mb-8">MCP API Test</h1>
-      
-      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
-        <div>
-          <label className="block text-sm font-medium mb-2">Email</label>
-          <input
-            type="text"
-            value={email}
-            onChange={(e) => setEmail(e.target.value)}
-            className="w-full bg-zinc-800 border border-zinc-700 rounded-md py-2 px-3 text-white"
-          />
-        </div>
-        
-        <div>
-          <label className="block text-sm font-medium mb-2">Domain</label>
-          <input
-            type="text"
-            value={domain}
-            onChange={(e) => setDomain(e.target.value)}
-            className="w-full bg-zinc-800 border border-zinc-700 rounded-md py-2 px-3 text-white"
-          />
+    <div className="grid grid-cols-12 gap-4 h-full max-h-full overflow-hidden">
+      {/* Left Sidebar: Tools */}
+      <div className="col-span-3 flex flex-col min-h-0">
+        <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl p-4 shadow-2xl flex-1 flex flex-col min-h-0">
+                      <h2 className="text-base font-semibold text-white mb-3">Endpoints</h2>
+                      <div className="space-y-1 overflow-y-auto custom-scrollbar flex-1">
+            {Object.entries(toolsByCategory).map(([category, tools]) => (
+              <div key={category}>
+                <div className="text-xs font-medium text-white/60 uppercase tracking-wide mb-1 mt-3 first:mt-0">
+                  {category}
+                </div>
+                {tools.map((tool) => (
+                  <button
+                    key={tool.id}
+                    onClick={() => handleSelectTool(tool)}
+                    className={`w-full text-left p-2.5 rounded-lg transition-all duration-200 group ${
+                      selectedTool?.id === tool.id
+                        ? 'bg-blue-600/20 border border-blue-500/30 shadow-lg'
+                        : 'hover:bg-white/10 border border-transparent'
+                    }`}
+                  >
+                    <div className="flex items-start gap-2.5">
+                      <tool.icon className={`w-4 h-4 mt-0.5 flex-shrink-0 ${
+                        selectedTool?.id === tool.id ? 'text-blue-400' : 'text-white/60 group-hover:text-white/80'
+                      }`} />
+                      <div className="flex-1 min-w-0">
+                        <div className={`font-medium text-sm truncate ${
+                          selectedTool?.id === tool.id ? 'text-white' : 'text-white/90 group-hover:text-white'
+                        }`}>
+                          {tool.name}
+                        </div>
+                        <div className="text-xs text-white/50 line-clamp-2 leading-tight">
+                          {tool.description}
+                        </div>
+                      </div>
+                    </div>
+                  </button>
+                ))}
+              </div>
+            ))}
+          </div>
         </div>
       </div>
-      
-      <div className="flex flex-wrap gap-3 mb-8">
-        <button
-          onClick={handleGetContactDetails}
-          disabled={isLoading || !email.trim()}
-          className="bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed"
-        >
-          Get Contact Details
-        </button>
-        
-        <button
-          onClick={handleGetAccountDetails}
-          disabled={isLoading || !domain.trim()}
-          className="bg-green-500 hover:bg-green-600 text-white font-medium py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed"
-        >
-          Get Account Details
-        </button>
-        
-        <button
-          onClick={handleGetAIResearch}
-          disabled={isLoading || !domain.trim()}
-          className="bg-purple-500 hover:bg-purple-600 text-white font-medium py-2 px-4 rounded disabled:opacity-50 disabled:cursor-not-allowed"
-        >
-          AI Account Research
-        </button>
-      </div>
-      
-      {isLoading && (
-        <div className="flex justify-center items-center py-12">
-          <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-purple-500"></div>
-        </div>
-      )}
-      
-      {error && (
-        <div className="mb-6 p-4 bg-red-900/50 border border-red-700 rounded-md">
-          <h3 className="text-lg font-semibold text-red-400 mb-2">Error</h3>
-          <p className="text-red-200">{error}</p>
+
+      {/* Right Content Area */}
+      <div className="col-span-9 flex flex-col gap-4 min-h-0">
+        {/* Input Section */}
+        <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl p-4 shadow-2xl flex-shrink-0">
+          <h2 className="text-base font-semibold text-white mb-3">Input</h2>
+                     {selectedTool ? (
+            <div className={selectedTool.id === 'discover-persons' ? "grid grid-cols-2 gap-3" : "flex gap-4 items-end"}>
+              {selectedTool.inputs.includes("email") && (
+                <div className="flex-1">
+                  <label htmlFor="email" className="block text-xs font-medium text-white/80 mb-1.5">
+                    Email
+                  </label>
+                  <input
+                    type="email"
+                    id="email"
+                    value={email}
+                    onChange={(e) => setEmail(e.target.value)}
+                    className="w-full px-3 py-2 rounded-lg bg-white/10 backdrop-blur-sm border border-white/20 text-white placeholder-white/40 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors text-sm"
+                    placeholder="francis@madkudu.com"
+                  />
+                </div>
+              )}
+              {selectedTool.inputs.includes("domain") && (
+                <div className="flex-1">
+                  <label htmlFor="domain" className="block text-xs font-medium text-white/80 mb-1.5">
+                    Domain
+                  </label>
+                  <input
+                    type="text"
+                    id="domain"
+                    value={domain}
+                    onChange={(e) => setDomain(e.target.value)}
+                    className="w-full px-3 py-2 rounded-lg bg-white/10 backdrop-blur-sm border border-white/20 text-white placeholder-white/40 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors text-sm"
+                    placeholder="madkudu.com"
+                  />
+                </div>
+              )}
+              {selectedTool.inputs.includes("title") && (
+                <div className="flex-1">
+                  <label htmlFor="title" className="block text-xs font-medium text-white/80 mb-1.5">
+                    Title
+                  </label>
+                  <input
+                    type="text"
+                    id="title"
+                    value={title}
+                    onChange={(e) => setTitle(e.target.value)}
+                    className="w-full px-3 py-2 rounded-lg bg-white/10 backdrop-blur-sm border border-white/20 text-white placeholder-white/40 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors text-sm"
+                    placeholder="CEO, CTO, VP Marketing"
+                  />
+                </div>
+              )}
+              {selectedTool.inputs.includes("seniority") && (
+                <div className="flex-1">
+                  <label htmlFor="seniority" className="block text-xs font-medium text-white/80 mb-1.5">
+                    Seniority
+                  </label>
+                  <select
+                    id="seniority"
+                    value={seniority}
+                    onChange={(e) => setSeniority(e.target.value)}
+                    className="w-full px-3 py-2 rounded-lg bg-white/10 backdrop-blur-sm border border-white/20 text-white focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors text-sm"
+                  >
+                    <option value="">Any</option>
+                    <option value="executive">Executive</option>
+                    <option value="director">Director</option>
+                    <option value="manager">Manager</option>
+                    <option value="individual_contributor">Individual Contributor</option>
+                  </select>
+                </div>
+              )}
+              {selectedTool.inputs.includes("country") && (
+                <div className="flex-1">
+                  <label htmlFor="country" className="block text-xs font-medium text-white/80 mb-1.5">
+                    Country
+                  </label>
+                  <input
+                    type="text"
+                    id="country"
+                    value={country}
+                    onChange={(e) => setCountry(e.target.value)}
+                    className="w-full px-3 py-2 rounded-lg bg-white/10 backdrop-blur-sm border border-white/20 text-white placeholder-white/40 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 transition-colors text-sm"
+                    placeholder="United States, France"
+                  />
+                </div>
+              )}
+                             <button
+                onClick={handleRunTool}
+                disabled={isLoading}
+                className={`${selectedTool.id === 'discover-persons' ? 'col-span-2 mt-2' : ''} px-4 py-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-medium rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg text-sm whitespace-nowrap`}
+              >
+                {isLoading ? (
+                  <div className="flex items-center gap-2 justify-center">
+                    <div className="w-3 h-3 border-2 border-white/30 border-t-white rounded-full animate-spin"></div>
+                    Testing...
+                  </div>
+                ) : (
+                  "Test Tool"
+                )}
+              </button>
+            </div>
+          ) : (
+            <p className="text-white/60 text-center py-4 text-sm">
+              Select a tool to configure input parameters
+            </p>
+          )}
         </div>
-      )}
-      
-      {Boolean(result) && !isLoading && (
-        <div className="mb-6">
-          <div className="flex border-b border-zinc-700 mb-4">
-            <button
-              className={`px-4 py-2 ${activeTab === "formatted" ? "border-b-2 border-purple-500 text-white" : "text-zinc-400"}`}
-              onClick={() => setActiveTab("formatted")}
-            >
-              Formatted
-            </button>
-            <button
-              className={`px-4 py-2 ${activeTab === "raw" ? "border-b-2 border-blue-500 text-white" : "text-zinc-400"}`}
-              onClick={() => setActiveTab("raw")}
-            >
-              Raw JSON
-            </button>
+
+        {/* Results Section */}
+        <div className="bg-white/5 backdrop-blur-sm border border-white/10 rounded-2xl p-4 shadow-2xl flex-1 min-h-0 flex flex-col">
+          <div className="flex justify-between items-center mb-3">
+            <h2 className="text-base font-semibold text-white">Results</h2>
+            {result && !error && (
+              <div className="flex border border-white/20 rounded-lg overflow-hidden">
+                <button
+                  onClick={() => setActiveTab("formatted")}
+                  className={`px-3 py-1.5 text-xs font-medium transition-colors ${
+                    activeTab === 'formatted' 
+                      ? 'bg-white/20 text-white' 
+                      : 'text-white/60 hover:text-white hover:bg-white/10'
+                  }`}
+                >
+                  Formatted
+                </button>
+                <button
+                  onClick={() => setActiveTab("raw")}
+                  className={`px-3 py-1.5 text-xs font-medium transition-colors border-l border-white/20 ${
+                    activeTab === 'raw' 
+                      ? 'bg-white/20 text-white' 
+                      : 'text-white/60 hover:text-white hover:bg-white/10'
+                  }`}
+                >
+                  Raw JSON
+                </button>
+              </div>
+            )}
           </div>
-          
-          <h2 className="text-xl font-bold mb-4">Results</h2>
-          
-          <div className="bg-zinc-800 border border-zinc-700 rounded-md p-4 overflow-x-auto">
-            {activeTab === "formatted" ? (
-              resultType === "contact" ? renderFormattedContactDetails() :
-              resultType === "account" ? renderFormattedAccountDetails() :
-              resultType === "research" ? renderFormattedResearch() :
-              <p className="text-gray-400">No formatted view available</p>
+
+          <div className="flex-1 overflow-auto custom-scrollbar">
+            {isLoading ? (
+              <div className="flex flex-col items-center justify-center h-full text-center">
+                <div className="w-6 h-6 border-2 border-white/30 border-t-white rounded-full animate-spin mb-3"></div>
+                <p className="text-white/60 text-sm">Testing {selectedTool?.name}...</p>
+              </div>
+            ) : error ? (
+              <div className="p-3 bg-red-500/20 border border-red-500/30 rounded-lg">
+                <p className="text-red-400 font-medium text-sm">Error</p>
+                <p className="text-red-300 text-xs mt-1">{error}</p>
+              </div>
+            ) : result ? (
+              <>
+                {activeTab === 'raw' ? (
+                  <pre className="whitespace-pre-wrap text-white/90 bg-black/30 p-3 rounded-lg text-xs overflow-auto h-full">
+                    {JSON.stringify(result, null, 2)}
+                  </pre>
+                ) : (
+                  <div className="h-full">
+                    {renderFormattedResult()}
+                  </div>
+                )}
+              </>
             ) : (
-              <pre className="text-sm text-gray-300 whitespace-pre-wrap">
-                {JSON.stringify(result, null, 2)}
-              </pre>
+              <div className="flex flex-col items-center justify-center h-full text-center">
+                <Wrench className="w-8 h-8 text-white/30 mb-3" />
+                <p className="text-white/60 text-sm">Select a tool and click "Test Tool" to see results</p>
+              </div>
             )}
           </div>
         </div>
-      )}
+      </div>
     </div>
   );
 } 
\ No newline at end of file
diff --git a/src/app/mcp-test/page.tsx b/src/app/mcp-test/page.tsx
index 93d0d92..9ec1735 100644
--- a/src/app/mcp-test/page.tsx
+++ b/src/app/mcp-test/page.tsx
@@ -1,14 +1,35 @@
 import { HydrateClient } from "~/trpc/server";
 import ApiTester from "../_components/ApiTester";
+import { FlaskConical } from "lucide-react";
 
 export default function McpTestPage() {
   return (
     <HydrateClient>
-      <main className="min-h-screen bg-gray-900 text-white">
-        <div className="container mx-auto px-4 py-6">
+      <div className="container mx-auto px-4 flex flex-col h-full overflow-hidden">
+        <div className="py-6 flex-shrink-0">
+          <div className="flex items-center gap-4 mb-4">
+            <div className="w-12 h-12 rounded-2xl bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center shadow-xl">
+              <FlaskConical className="w-6 h-6 text-white" />
+            </div>
+            <div>
+              <h1 className="text-2xl font-bold text-white mb-1">
+                API Tester
+              </h1>
+              <p className="text-sm text-white/70">
+                Test individual MadKudu API endpoints with custom inputs
+              </p>
+            </div>
+          </div>
+        </div>
+        <div className="flex-1 min-h-0">
           <ApiTester />
         </div>
-      </main>
+        <div className="py-4 flex-shrink-0">
+          <p className="text-xs text-white/50 text-center">
+            🛡️ Privacy Notice: This is a preview environment. Data is not stored or used beyond your session.
+          </p>
+        </div>
+      </div>
     </HydrateClient>
   );
 } 
\ No newline at end of file
diff --git a/src/lib/madkuduClient.ts b/src/lib/madkuduClient.ts
index 48d965e..3698e99 100644
--- a/src/lib/madkuduClient.ts
+++ b/src/lib/madkuduClient.ts
@@ -52,27 +52,125 @@ export const lookupAccount = async (domain: string) => {
   }
 };
 
-export const getAccountDetails = async (accountId: string) => {
+export const getAccountDetails = async (params: { domain: string }) => {
   try {
-    console.log(`[MadKudu API] Getting account details for ID: ${accountId}`);
-    const { data } = await axios.get(`https://madapi.madkudu.com/accounts/${accountId}`, { headers });
-    console.log(`[MadKudu API] Account details retrieved for ID: ${accountId}`);
-    return data;
+    console.log(`[MadKudu API] Getting account details for: ${params.domain}`);
+    
+    // Step 1: Lookup account to get their ID
+    console.log(`[MadKudu API] First looking up account to get ID...`);
+    const accountData = await lookupAccount(params.domain);
+    console.log(`[MadKudu API] Account lookup result:`, JSON.stringify(accountData, null, 2));
+    
+    if (!accountData || !Array.isArray(accountData) || accountData.length === 0 || !accountData[0]?.mk_id) {
+      return {
+        error: 'Account not found',
+        message: `No account found with domain ${params.domain}. Account lookup returned: ${JSON.stringify(accountData)}`,
+        suggestion: 'Try with a different domain or ensure the account is in the MadKudu database'
+      };
+    }
+    
+    const accountId = accountData[0].mk_id;
+    console.log(`[MadKudu API] Found account ID: ${accountId}`);
+    
+    // Step 2: Try different possible endpoints for account details
+    const possibleEndpoints = [
+      { url: `https://madapi.madkudu.com/accounts/${accountId}`, params: {} },
+      { url: `https://madapi.madkudu.com/companies/${accountId}`, params: {} },
+      { url: `https://madapi.madkudu.com/v1/accounts`, params: { mk_id: accountId } },
+      { url: `https://madapi.madkudu.com/accounts`, params: { id: accountId } }
+    ];
+    
+    for (const endpoint of possibleEndpoints) {
+      try {
+        console.log(`[MadKudu API] Trying endpoint: ${endpoint.url} with params:`, endpoint.params);
+        const { data } = await axios.get(endpoint.url, { 
+          headers, 
+          params: endpoint.params
+        });
+        console.log(`[MadKudu API] Success! Account details retrieved from: ${endpoint.url}`);
+        return data;
+      } catch (endpointError) {
+        console.log(`[MadKudu API] Failed endpoint ${endpoint.url}:`, endpointError instanceof AxiosError ? endpointError.response?.status : endpointError);
+      }
+    }
+    
+    // If all endpoints failed, return the account data we already have as enriched account details
+    console.log(`[MadKudu API] All endpoints failed, returning enriched account data`);
+    return {
+      account: accountData[0],
+      enriched: true,
+      message: 'Account details enriched from account lookup data'
+    };
+    
   } catch (error) {
     console.error('Error getting account details:', error);
-    throw new Error(error instanceof AxiosError ? error.message : 'Unknown error');
+    
+    return {
+      error: 'Error during account details lookup',
+      message: error instanceof AxiosError ? `${error.response?.status}: ${error.message}` : String(error),
+      suggestion: 'Check the console for detailed error information'
+    };
   }
 };
 
-export const getContactDetails = async (contactId: string) => {
+export const getPersonDetails = async (params: { email: string }) => {
   try {
-    console.log(`[MadKudu API] Getting contact details for ID: ${contactId}`);
-    const { data } = await axios.get(`https://madapi.madkudu.com/contacts/${contactId}`, { headers });
-    console.log(`[MadKudu API] Contact details retrieved for ID: ${contactId}`);
-    return data;
+    console.log(`[MadKudu API] Getting person details for: ${params.email}`);
+    
+    // Step 1: Lookup person to get their ID
+    console.log(`[MadKudu API] First looking up person to get ID...`);
+    const personData = await lookupPerson(params.email);
+    console.log(`[MadKudu API] Person lookup result:`, JSON.stringify(personData, null, 2));
+    
+    if (!personData || !Array.isArray(personData) || personData.length === 0 || !personData[0]?.mk_id) {
+      return {
+        error: 'Person not found',
+        message: `No person found with email ${params.email}. Person lookup returned: ${JSON.stringify(personData)}`,
+        suggestion: 'Try with a different email address or ensure the person is in the MadKudu database'
+      };
+    }
+    
+    const personId = personData[0].mk_id;
+    console.log(`[MadKudu API] Found person ID: ${personId}`);
+    
+    // Step 2: Try different possible endpoints for person details
+    const possibleEndpoints = [
+      { url: `https://madapi.madkudu.com/persons/${personId}`, params: {} },
+      { url: `https://madapi.madkudu.com/contacts/${personId}`, params: {} },
+      { url: `https://madapi.madkudu.com/v1/persons`, params: { mk_id: personId } },
+      { url: `https://madapi.madkudu.com/persons`, params: { id: personId } }
+    ];
+    
+    for (const endpoint of possibleEndpoints) {
+      try {
+        console.log(`[MadKudu API] Trying endpoint: ${endpoint.url} with params:`, endpoint.params);
+        const { data } = await axios.get(endpoint.url, { 
+          headers, 
+          params: endpoint.params
+        });
+        console.log(`[MadKudu API] Success! Person details retrieved from: ${endpoint.url}`);
+        return data;
+      } catch (endpointError) {
+        console.log(`[MadKudu API] Failed endpoint ${endpoint.url}:`, endpointError instanceof AxiosError ? endpointError.response?.status : endpointError);
+      }
+    }
+    
+    // If all endpoints failed, return the person data we already have as enriched person details
+    console.log(`[MadKudu API] All endpoints failed, returning enriched person data`);
+    return {
+      person: personData[0],
+      enriched: true,
+      message: 'Person details enriched from person lookup data'
+    };
+    
   } catch (error) {
-    console.error('Error getting contact details:', error);
-    throw new Error(error instanceof AxiosError ? error.message : 'Unknown error');
+    console.error('Error getting person details:', error);
+    
+    return {
+      error: 'Error during person details lookup',
+      message: error instanceof AxiosError ? `${error.response?.status}: ${error.message}` : String(error),
+      suggestion: 'Check the console for detailed error information'
+    };
   }
 };
 
@@ -236,4 +334,135 @@ export const getAIResearchWithRetry = async (domain: string, maxRetries = 3): Pr
   }
   
   throw new Error(`Failed to get AI research after ${maxRetries} attempts`);
+};
+
+export const discoverPersons = async (params: { 
+  company_domain?: string, 
+  provider: 'apollo' | 'zoominfo' | 'cognism',
+  title?: string,
+  seniority?: string,
+  country?: string
+}) => {
+  try {
+    console.log(`[MadKudu API] Discovering persons with params: ${JSON.stringify(params)}`);
+    
+    // Build the request body according to the API spec
+    const requestBody: any = {
+      provider: params.provider,
+      filters: {}
+    };
+    
+    // Add filters only if they have values
+    if (params.company_domain) requestBody.filters.company_domain = params.company_domain;
+    if (params.title) requestBody.filters.title = params.title;
+    if (params.seniority) requestBody.filters.seniority = params.seniority;
+    if (params.country) requestBody.filters.location = { country: params.country };
+    
+    // Add default pagination - limit to 3 results for discovery
+    requestBody.pagination = { page: 1, size: 3 };
+    
+    console.log(`[MadKudu API] Request body: ${JSON.stringify(requestBody)}`);
+    
+    // Use POST method with correct endpoint
+    const { data } = await axios.post('https://madapi.madkudu.com/sourcing/persons/discover', requestBody, { headers });
+    console.log(`[MadKudu API] Person discovery successful.`);
+    return data;
+  } catch (error) {
+    console.error('Error discovering persons:', error);
+    
+    // If the endpoint doesn't exist, return a helpful message instead of throwing
+    if (error instanceof AxiosError && error.response?.status === 404) {
+      return {
+        error: 'Person discovery endpoint not available',
+        message: 'This feature may require additional API permissions',
+        suggestion: 'Please contact MadKudu support to enable sourcing features'
+      };
+    }
+    
+    throw new Error(error instanceof AxiosError ? error.message : 'Unknown error');
+  }
+};
+
+export const getPersonActivities = async (params: { email: string }) => {
+  try {
+    console.log(`[MadKudu API] Getting person activities for: ${params.email}`);
+    
+    // Step 1: Lookup person to get their ID
+    console.log(`[MadKudu API] First looking up person to get ID...`);
+    const personData = await lookupPerson(params.email);
+    console.log(`[MadKudu API] Person lookup result:`, JSON.stringify(personData, null, 2));
+    
+    if (!personData || !Array.isArray(personData) || personData.length === 0 || !personData[0]?.mk_id) {
+      return {
+        error: 'Person not found',
+        message: `No person found with email ${params.email}. Person lookup returned: ${JSON.stringify(personData)}`,
+        suggestion: 'Try with a different email address or ensure the person is in the MadKudu database'
+      };
+    }
+    
+    const personId = personData[0].mk_id;
+    console.log(`[MadKudu API] Found person ID: ${personId}`);
+    
+    // Step 2: Try different possible endpoint structures
+    const possibleEndpoints = [
+      { url: `https://madapi.madkudu.com/activities/persons/${personId}`, params: {} },
+      { url: `https://madapi.madkudu.com/activities/persons`, params: { person_id: personId } },
+      { url: `https://madapi.madkudu.com/activities/persons`, params: { id: personId } },
+      { url: `https://madapi.madkudu.com/persons/${personId}/activities`, params: {} }
+    ];
+    
+    for (const endpoint of possibleEndpoints) {
+      try {
+        console.log(`[MadKudu API] Trying endpoint: ${endpoint.url} with params:`, endpoint.params);
+        const { data } = await axios.get(endpoint.url, { 
+          headers, 
+          params: { ...endpoint.params, limit: 20 }
+        });
+        console.log(`[MadKudu API] Success! Person activities retrieved from: ${endpoint.url}`);
+        return data;
+      } catch (endpointError) {
+        console.log(`[MadKudu API] Failed endpoint ${endpoint.url}:`, endpointError instanceof AxiosError ? endpointError.response?.status : endpointError);
+      }
+    }
+    
+    // If all endpoints failed
+    return {
+      error: 'Person activities endpoint not available',
+      message: `Person found (ID: ${personId}) but no activities endpoint worked`,
+      suggestion: 'The activities API may not be available or may require different authentication'
+    };
+    
+  } catch (error) {
+    console.error('Error getting person activities:', error);
+    
+    return {
+      error: 'Error during person activities lookup',
+      message: error instanceof AxiosError ? `${error.response?.status}: ${error.message}` : String(error),
+      suggestion: 'Check the console for detailed error information'
+    };
+  }
+};
+
+export const getAccountActivities = async (params: { domain: string }) => {
+  try {
+    console.log(`[MadKudu API] Getting account activities for: ${params.domain}`);
+    const { data } = await axios.get('https://madapi.madkudu.com/activities/accounts', { headers, params });
+    console.log(`[MadKudu API] Account activities retrieved for: ${params.domain}`);
+    return data;
+  } catch (error) {
+    console.error('Error getting account activities:', error);
+    throw new Error(error instanceof AxiosError ? error.message : 'Unknown error');
+  }
+};
+
+export const getAccountTopUsers = async (params: { domain: string }) => {
+  try {
+    console.log(`[MadKudu API] Getting account top users for: ${params.domain}`);
+    const { data } = await axios.get('https://madapi.madkudu.com/accounts/top-users', { headers, params });
+    console.log(`[MadKudu API] Account top users retrieved for: ${params.domain}`);
+    return data;
+  } catch (error) {
+    console.error('Error getting account top users:', error);
+    throw new Error(error instanceof AxiosError ? error.message : 'Unknown error');
+  }
 }; 
\ No newline at end of file
diff --git a/src/server/api/routers/madkudu.ts b/src/server/api/routers/madkudu.ts
index 02317bc..6e49bef 100644
--- a/src/server/api/routers/madkudu.ts
+++ b/src/server/api/routers/madkudu.ts
@@ -6,12 +6,16 @@ import {
   lookupPerson,
   lookupAccount,
   getAccountDetails,
-  getContactDetails,
+  getPersonDetails,
   getAIResearch,
   getAIResearchWithRetry,
   getDomainFromEmail,
   isEmail,
   isDomain,
+  getPersonActivities,
+  discoverPersons,
+  getAccountActivities,
+  getAccountTopUsers,
 } from "~/lib/madkuduClient";
 import { PrismaClient } from "@prisma/client";
 
@@ -119,7 +123,7 @@ const getEnhancedPromptForExecutiveOutreach = (enrichmentData: Record<string, st
   }
   
   // Format contact context using person data and additional details
-  if (enrichmentData.contactContext || enrichmentData.contactDetails) {
+          if (enrichmentData.contactContext || enrichmentData.personDetails) {
     contactContext = "";
     
     if (enrichmentData.contactContext) {
@@ -139,9 +143,9 @@ const getEnhancedPromptForExecutiveOutreach = (enrichmentData: Record<string, st
       }
     }
     
-    if (enrichmentData.contactDetails) {
-      contactContext += `### Additional Contact Details\n${enrichmentData.contactDetails}\n\n`;
-    }
+            if (enrichmentData.personDetails) {
+          contactContext += `### Additional Person Details\n${enrichmentData.personDetails}\n\n`;
+        }
   }
 
   return `You are Francis Brero, CPO at MadKudu. You're preparing a first outreach to this executive.
@@ -465,14 +469,14 @@ export const madkuduRouter = createTRPCRouter({
             // Try to fetch additional contact details if there's a contactId
             if (personData[0].id) {
               try {
-                console.log(`[MadKudu Router] Getting contact details for ID: ${personData[0].id}`);
-                const contactDetails = await getContactDetails(personData[0].id);
-                if (contactDetails) {
-                  extractedInfo.contactDetails = JSON.stringify(contactDetails, null, 2);
-                  console.log(`[MadKudu Router] Found additional contact details`);
+                console.log(`[MadKudu Router] Getting person details for: ${userInput}`);
+                const personDetails = await getPersonDetails({ email: userInput });
+                if (personDetails) {
+                  extractedInfo.personDetails = JSON.stringify(personDetails, null, 2);
+                  console.log(`[MadKudu Router] Found additional person details`);
                 }
               } catch (error) {
-                console.error("Error getting contact details:", error);
+                console.error("Error getting person details:", error);
               }
             }
             
@@ -789,16 +793,16 @@ export const madkuduRouter = createTRPCRouter({
               
               // Try to fetch additional contact details if there's a contactId
               if (personData[0].id) {
-                try {
-                  console.log(`[MadKudu Router] Getting contact details for ID: ${personData[0].id}`);
-                  const contactDetails = await getContactDetails(personData[0].id);
-                  if (contactDetails) {
-                    extractedInfo.contactDetails = JSON.stringify(contactDetails, null, 2);
-                    console.log(`[MadKudu Router] Found additional contact details`);
-                  }
-                } catch (error: unknown) {
-                  console.error("Error getting contact details:", error);
+                              try {
+                console.log(`[MadKudu Router] Getting person details for: ${userInput}`);
+                const personDetails = await getPersonDetails({ email: userInput });
+                if (personDetails) {
+                  extractedInfo.personDetails = JSON.stringify(personDetails, null, 2);
+                  console.log(`[MadKudu Router] Found additional person details`);
                 }
+              } catch (error: unknown) {
+                console.error("Error getting person details:", error);
+              }
               }
             }
             
@@ -1298,41 +1302,102 @@ When asked about companies or organizations, try to provide relevant, factual in
     }),
 
   getAccountDetails: publicProcedure
-    .input(z.object({ accountId: z.string() }))
+    .input(z.object({ domain: z.string() }))
     .mutation(async ({ input }) => {
-      console.log(`[MadKudu API Test] Getting account details for ID: ${input.accountId}`);
-      try {
-        const result = await getAccountDetails(input.accountId);
-        return result;
-      } catch (error) {
-        console.error(`[MadKudu API Test] Error getting account details:`, error);
-        throw error;
-      }
+      console.log(`[MadKudu Router] Getting account details for domain: ${input.domain}`);
+      return getAccountDetails(input);
     }),
 
-  getContactDetails: publicProcedure
-    .input(z.object({ contactId: z.string() }))
+  getPersonDetails: publicProcedure
+    .input(z.object({ email: z.string().email() }))
     .mutation(async ({ input }) => {
-      console.log(`[MadKudu API Test] Getting contact details for ID: ${input.contactId}`);
-      try {
-        const result = await getContactDetails(input.contactId);
-        return result;
-      } catch (error) {
-        console.error(`[MadKudu API Test] Error getting contact details:`, error);
-        throw error;
-      }
+      console.log(`[MadKudu Router] Getting person details for email: ${input.email}`);
+      return getPersonDetails(input);
     }),
 
   getAIResearch: publicProcedure
     .input(z.object({ domain: z.string() }))
+    .mutation(async ({ input }) => getAIResearch(input.domain)),
+
+  discoverPersons: publicProcedure
+    .input(
+      z.object({
+        provider: z.enum(["apollo", "zoominfo", "cognism"]),
+        company_domain: z.string().optional(),
+        title: z.string().optional(),
+        seniority: z.string().optional(),
+        country: z.string().optional(),
+      })
+    )
     .mutation(async ({ input }) => {
-      console.log(`[MadKudu API Test] Getting AI research for domain: ${input.domain}`);
       try {
-        const result = await getAIResearchWithRetry(input.domain);
-        return result;
+        console.log('[MadKudu Router] Discover persons input:', input);
+        
+        // Pass all parameters to the updated API function
+        return discoverPersons({ 
+          company_domain: input.company_domain,
+          provider: input.provider,
+          title: input.title,
+          seniority: input.seniority,
+          country: input.country
+        });
       } catch (error) {
-        console.error(`[MadKudu API Test] Error getting AI research:`, error);
+        console.error('Error in discoverPersons:', error);
         throw error;
       }
     }),
+
+  getPersonActivities: publicProcedure
+    .input(z.object({ email: z.string() }))
+    .mutation(async ({ input }) => {
+      console.log('[MadKudu Router] Person activities input:', input);
+      
+      // Try MCP function first since direct API endpoints aren't working
+      try {
+        // Use the MCP server to call the person activities function
+        const mcpResponse = await fetch('http://localhost:3001/mcp', {
+          method: 'POST',
+          headers: { 'Content-Type': 'application/json' },
+          body: JSON.stringify({
+            method: 'tools/call',
+            params: {
+              name: 'madkudu-person-activities',
+              arguments: { email: input.email }
+            }
+          })
+        });
+        
+        if (mcpResponse.ok) {
+          const mcpData = await mcpResponse.json();
+          console.log('[MadKudu Router] MCP response:', mcpData);
+          
+          // Parse the MCP response
+          if (mcpData.content?.[0]?.text) {
+            try {
+              return JSON.parse(mcpData.content[0].text);
+            } catch (parseError) {
+              console.log('[MadKudu Router] MCP response not JSON, returning as-is');
+              return { data: mcpData.content[0].text };
+            }
+          }
+          
+          return mcpData;
+        } else {
+          console.log('[MadKudu Router] MCP call failed, falling back to direct API');
+        }
+      } catch (mcpError) {
+        console.log('[MadKudu Router] MCP error, falling back to direct API:', mcpError);
+      }
+      
+      // Fallback to direct API (which we know is failing)
+      return getPersonActivities(input);
+    }),
+
+  getAccountActivities: publicProcedure
+    .input(z.object({ domain: z.string() }))
+    .mutation(async ({ input }) => getAccountActivities(input)),
+
+  getAccountTopUsers: publicProcedure
+    .input(z.object({ domain: z.string() }))
+    .mutation(async ({ input }) => getAccountTopUsers(input)),
 }); 
\ No newline at end of file
-- 
2.45.2

